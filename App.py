import streamlit as st
import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from datetime import datetime, timedelta

# Configuraci칩n de la p치gina
st.set_page_config(
    page_title="An치lisis de Acciones y VIX",
    page_icon="游늳",
    layout="wide",
    initial_sidebar_state="expanded"
)

# T칤tulo y descripci칩n
st.title("游늳 An치lisis de Acciones y VIX")
st.markdown("""
Esta aplicaci칩n te permite analizar los retornos de acciones seleccionadas y su relaci칩n con el 칤ndice VIX.
Puedes elegir m칰ltiples acciones, ajustar el per칤odo de an치lisis y visualizar gr치ficos interactivos.
""")

# Sidebar para la selecci칩n de acciones y per칤odo
with st.sidebar:
    st.header("Configuraci칩n")
    
    # Selecci칩n de acciones
    tickers = st.multiselect(
        "Selecciona las acciones:",
        options=["SPY", "AAPL", "MSFT", "GOOGL", "AMZN", "TSLA", "NVDA"],
        default=["SPY"]
    )
    
    # Selecci칩n del per칤odo
    period = st.selectbox(
        "Selecciona el per칤odo:",
        options=["1 mes", "3 meses", "6 meses", "1 a침o", "2 a침os", "5 a침os", "10 a침os"],
        index=3
    )
    
    # Bot칩n para ejecutar el an치lisis
    if st.button("Ejecutar An치lisis", type="primary"):
        st.session_state.run_analysis = True
    else:
        st.session_state.run_analysis = False

# Funci칩n para descargar datos
@st.cache_data
def load_data(ticker, period):
    """Descarga datos hist칩ricos de un ticker."""
    try:
        data = yf.download(ticker, period=period)
        return data
    except Exception as e:
        st.error(f"Error al descargar datos para {ticker}: {e}")
        return None

# Funci칩n para calcular retornos
def calculate_returns(data):
    """Calcula los retornos diarios y acumulados."""
    data['Retorno diario'] = (data['Close'] - data['Open']) / data['Open']
    data['Retorno acumulado'] = (1 + data['Retorno diario']).cumprod() - 1
    return data

# Funci칩n para graficar retornos
def plot_returns(data, ticker):
    """Grafica los retornos diarios y acumulados."""
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(18, 6))
    
    # Retornos diarios
    ax1.plot(data.index, data['Retorno diario'], marker='o', color='dodgerblue', label='Retorno diario', linestyle='-', linewidth=1)
    ax1.set_title(f'Retornos Diarios ({ticker})', fontsize=16, fontweight='bold')
    ax1.set_xlabel('Fecha', fontsize=14)
    ax1.set_ylabel('Retorno', fontsize=14)
    ax1.grid(True, linestyle='--', alpha=0.7)
    ax1.legend(fontsize=12)
    
    # Retornos acumulados
    ax2.plot(data.index, data['Retorno acumulado'], marker='o', color='green', label='Retorno acumulado', linestyle='-', linewidth=1)
    ax2.set_title(f'Retornos Acumulados ({ticker})', fontsize=16, fontweight='bold')
    ax2.set_xlabel('Fecha', fontsize=14)
    ax2.set_ylabel('Retorno Acumulado', fontsize=14)
    ax2.grid(True, linestyle='--', alpha=0.7)
    ax2.legend(fontsize=12)
    
    st.pyplot(fig)

# Funci칩n para graficar precios de cierre
def plot_close_prices(data, ticker):
    """Grafica los precios de cierre."""
    fig, ax = plt.subplots(figsize=(12, 6))
    ax.plot(data['Close'], label='Precio de cierre', color='purple', linewidth=2)
    ax.set_title(f'Precio de cierre de {ticker}', fontsize=16, fontweight='bold')
    ax.set_xlabel('Fecha', fontsize=14)
    ax.set_ylabel('Precio de cierre', fontsize=14)
    ax.grid(True, linestyle='--', alpha=0.7)
    ax.legend(fontsize=12)
    st.pyplot(fig)

# Funci칩n principal para ejecutar el an치lisis
def run_analysis():
    if not tickers:
        st.warning("Por favor, selecciona al menos una acci칩n.")
        return
    
    # Convertir el per칤odo seleccionado a un formato compatible con yfinance
    period_mapping = {
        "1 mes": "1mo",
        "3 meses": "3mo",
        "6 meses": "6mo",
        "1 a침o": "1y",
        "2 a침os": "2y",
        "5 a침os": "5y",
        "10 a침os": "10y"
    }
    period_yfinance = period_mapping[period]
    
    # Mostrar un spinner mientras se cargan los datos
    with st.spinner("Cargando datos..."):
        data_dict = {}
        for ticker in tickers:
            data = load_data(ticker, period_yfinance)
            if data is not None:
                data_dict[ticker] = data
        
        if not data_dict:
            st.error("No se pudieron descargar datos para ninguna acci칩n seleccionada.")
            return
    
    # Mostrar los datos y gr치ficos para cada acci칩n
    for ticker, data in data_dict.items():
        st.subheader(f"An치lisis de {ticker}")
        
        # Calcular retornos
        data = calculate_returns(data)
        
        # Mostrar precios de cierre
        st.write(f"Precios de cierre de {ticker}:")
        st.line_chart(data['Close'])
        
        # Mostrar gr치ficos de retornos
        plot_returns(data, ticker)
        
        # Mostrar estad칤sticas b치sicas
        st.write("Estad칤sticas b치sicas:")
        st.dataframe(data[['Open', 'Close', 'Retorno diario', 'Retorno acumulado']].describe())

# Ejecutar el an치lisis si el usuario hizo clic en el bot칩n
if st.session_state.get("run_analysis", False):
    run_analysis()
